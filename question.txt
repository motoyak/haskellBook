P.141
if something has an instance of Num but not an instance of Integral,
it can’t implement the methods of the Integral type class.
A subclass cannot override the methods of its superclass.

Q: Both sentences have convinced me, but are meanings of each independent?


P.197 para1 print should be gothic

P.318
Prelude> num :: [Int]; num = [1, 2, 3]
Prelude> :sprint num
num = [1,2,3]

in GHCi 8.6.5
Prelude> :sprint num
num = _


P.322 Intermission: Is it in normal form?
uncertain.
1. 1
2. 2
3. 2
4. 1
5. 1
6. 3
7. 2

P.363
How force evaluation affects performance.
unevaluated expression is thunk?
Why many thunks effects negatively on performance.


P.408
-128 :: Int8 is permitted with default setting of GHCi.

P.470
Determine the kinds:
Answers are uncertain.


P.516-517
Explanation of the example is bit confusing.

1. The first argument is our Puzzle with its three arguments.
2. The 𝑐 is our Char argument and is the character the player
guessed on this turn, with guessed representing the list of characters already guessed.
3. Our result is the Puzzle with the discovered replaced by newDiscovered the 𝑐 consed onto the front of the guessed list.
4. zipper is a combining function for deciding how to handle the
character in the word, what’s been guessed already, and the character that was just guessed. If the current character in the word is equal to what the player guessed, then we go ahead and return Just wordChar to fill in that spot in the puzzle. Otherwise, we kick the discoveredChar back out. We kick discoveredChar back out because it might either be a previously correctly guessed character or a Nothing that has not been guessed correctly this time nor in the past.
5. nowGuessed is the character they now guessed.
6. wordChar is the characters in the puzzle word – not the ones
they’ve guessed or not guessed, but the characters in the word
that they’re supposed to be guessing.
7. discoveredChar is the character that the player has discovered or not.
8. This if-then-else expression checks to see if the guessed character is one of the word characters. If it is, it wraps it in a Just because our puzzle word is a list of Maybe values.
9. newDiscovered is the new state of the puzzle which uses zipWith
and the zipper combining function to fill in characters in the
puzzle. The zipper function is first applied to the character the
player just guessed because that doesn’t change. Then it’s zipped
across two lists. One list is word which is the word the user is
trying to guess. The second list, discovered is the puzzle state
we’re starting with of type [Maybe Char]. That’s telling us which
characters in word have been guessed.
10. Now we’re going to make our newFilledInSoFar by using zipWith.
You may remember this from the Lists chapter. It’s going to zip
the word with the discovered values while applying the zipper
function from just above it to the values as it does.

P.535
Intermission:
on previous exercise, you instructed using Integral.

P.541 last paragraph
pick()) -> pick()


P.562 Using QuickCheck
QuickCheck cannot check polymorpicity?
-> polyQUickCheck, monomorphic

QuickCheck : multiple aruments and forAll ?? need to each argument?


P.586
OptionalMonoid
need Semigroup instance

P.603
Parenthesized symbolic type constructor and back qutated alphanumeric one are permitted to use data declaration.

P.713
need definition of Semigroup Bull

P.717
* need definition of Semigroup (ZipList a)
* indentation of definition Arbitrary (Sum a) is not correct
* Arbitrary (ZipList a) and Arbitrary (Sum a) are defined in Test.QuickCheck.Arbitrary

P.718
difference mempty pure and mempty ZipList []
quickBatch monoid -> mconcat is stall

P.721
Here toMyList is whatever function you’ve written to convert from
the built-in list type to the hand-made List type.
-> should be deleted because toMyList is not in code.
Maybe, custom made list was used in earlier edition, but in current edition a definition of ZipList' is
 newtype ZipList' a = ZipList' [a]

P.725, 726
missing titles of exercises

P.780
cannot reproduce
-- but note what happens here:
Prelude> f <> g
fromList [('a',1)]

explanations in xmonad part maybe mistook.
fromList [...] is not function.

P.801
2nd line of definition of tbs should be indented

P.814
foldMap (+1) (Just 1) should be
foldMap (+1) (Yep 1)

P.832
t in Traversable Laws is
applicative transformation
t :: (Applicative f, Applicative g) => f a -> g a
which preserves the Applicative operations;
  t (pure x) = pure x
  t (x <*> y) = t x <*> t y

ver1.0 below here

P.878
sg3 is undefined

P.892
correct:
runState (f>>f) 0

P.904
1 eof is also in Trifecta

P.906
Prelude> parseByteString (char 'a') mempty "a"
cause error
need :set -XOverLoadedStrings

P.938 need