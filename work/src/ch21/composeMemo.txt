(.)  ::                                (b -> c) -> (a -> b) -> a -> c
fmap :: Functor f =>                   (a -> b) -> f a -> f b
sequence :: (Traversable t, Monad m) => t (m a) -> m (t a)

(sequence .) ::  b ~ t (m a2), c ~ m (t a2)
            (Traversable t, Monad m) => (a1 -> t (m a2)) -> a1 -> m (t a2)

(sequence . ) . fmap :: b ~ (a1 -> t (m a2)), c ~ (a1 -> m (t a2))
                        a ~ (a4 -> b4), b ~ (f a4 -> f b4)
                        a1 ~ f a4, t (m a2) ~ f b4

(Functor f, Traversable t, Monad m) =>
  (a1 -> t (m a2))) -> (a1 -> m (t a2))
      b                    c

  (a4 -> b4)        -> (f a4 -> f b4)
      a                      b

t ~ f
a1 -> t (m a2) ~  f a4 -> f b4
                = t a4 -> t b4
a1 ~ t a4
m a2 ~ b4

a -> c ~  (a4 -> b4) -> (a1 -> m (t a2))
        = (a4 -> b4) -> (t a4 -> m (t a2))
        = (a4 -> m a2) -> (t a4 -> m (t a2))
        = (a1 -> m a2) -> (t a1 -> m (t a2))
        = (a1 -> m a2) -> t a1 -> m (t a2)


(fmap . fmap) :: a1 -> b1 ~ f2 a2 -> f2 b2
  (a1 -> b1) -> (f1 a1 -> f1 b1)
      b                c

  (a2 -> b2) -> (f2 a2 -> f2 b2)
      a                b

a -> c ~   (a2 -> b2) -> (f1 a1 -> f1 b1)
         = (a2 -> b2) -> (f1 (f2 a2) -> f1 (f2 b2))
         = ( a ->  b) -> (f1 (f2 a)  -> f1 (f2 b))
         = (a -> b) -> f1 (f2 a) -> f1 (f2 b)


(sequence .) . :: b ~ (a1 -> t (m a2)) , c ~ a1 -> m (t a2)
            (Traversable t, Monad m) => (a0 -> (a1 -> t (m a2))) -> a0 -> a1 -> m (t a2)
                                      = (a1 -> (a2 -> t (m a3))) -> a1 -> a2 -> m (t a3)
                                      = (a1 ->  a2 -> t (m a3))  -> a1 -> a2 -> m (t a3)


# Traversable Lays

## Naturality

t . traverse f = traverse (t . f)

traverse :: (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
t :: (Applicative f, Applicative g) => f a -> g a
f :: Applicative f => a -> f b

t . traverse f :: t a -> g (t b)
t . f :: a -> g b
traverse (t.f) :: t a -> g (t b)
